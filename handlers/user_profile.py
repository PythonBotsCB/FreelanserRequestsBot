from constants import *
from config import *
from permission.roles import UserBot

from aiogram.dispatcher.filters import Text
from aiogram.types import *
import json

@dp.message_handler(Text(equals='üè¢ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'))
async def user_profile(message: Message) -> None:

    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        KeyboardButton('‚úÖ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'),
        KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        KeyboardButton('üìã –ì—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã'),
        KeyboardButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),

    ]

    keyboard.add(*buttons)

    await message.answer('¬´‚úÖ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª -  —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏\n\n¬´üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª - —Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n\n¬´üìã –ì—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã¬ª - –≤—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É*\n\n*–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ', reply_markup=keyboard)

@dp.message_handler(Text(equals='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def backmenu(message: Message) -> None:
    await message.answer(TEXT_HELLO, reply_markup=UserBot.get_keyboard())



@dp.message_handler(Text(equals='üìã –ì—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã'))
async def google_sheets(message: Message) -> None:
    ''' –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ '''
    await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞—è–≤–æ–∫. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É, –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.')



@dp.message_handler(Text(equals='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def statistics(message: Message) -> None:
    ''' –í—ã–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ '''
    await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É')



@dp.message_handler(Text(equals='‚úÖ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏'))
async def subscribes(message: Message) -> None:
    ''' –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª data.json –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ '''

    with open(f'{DB_LOC}/data.json', 'r', encoding='utf-8') as file:
        data_users = json.load(file)

    subs_info = data_users.get(str(message.chat.id)).get('subscribes')
    print(subs_info)
    if len(subs_info) == 0:
        await message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—É—Å—Ç!')
    else:
        text_answer = '–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n'
        for index, sub in enumerate(subs_info):
            string_answer = f'<b>{index + 1}</b>. {sub} ({subs_info.get(sub).get("type_sub")}):\n\t–° <b>{subs_info.get(sub).get("start_sub")}</b> –ø–æ' \
                            f' <b>{subs_info.get(sub).get("end_sub")}</b>\n\n'
            text_answer += string_answer

        await message.answer(text_answer)