from aiogram.types import *
from states.FSMcategory import *
from config import *
from constants import *
from permission.roles import *
from items import *
from subscribes import *
from payments import *

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
import json

@dp.message_handler(Text(equals='üôã‚Äç‚ôÇÔ∏è –ó–∞—è–≤–∫–∏ –Ω–∞ —É—Å–ª—É–≥—É'), state=None)
async def category_queries(message: Message) -> None:

    keyboard = InlineKeyboardMarkup()

    for category in CATEGORY_BUTTONS:
        keyboard.add(InlineKeyboardButton(category, callback_data=category))

    await message.reply('<b><i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –Ω—É–∂–Ω—ã –∑–∞—è–≤–∫–∏</i></b>\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –¥–∞—Å—Ç –≤–∞–º –ø–æ—Å—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–∞—è–≤–æ–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –ø–ª–æ—â–∞–¥–æ–∫ –Ω–∞ –≤–∞—à–∏ —É—Å–ª—É–≥–∏\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
    await SelectCategory.category.set()

@dp.message_handler(state=SelectCategory.category)
async def cancel_request(message: Message, state: FSMContext) -> None:
    await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞!')
    await state.finish()

@dp.callback_query_handler(lambda callback_query: True, state=SelectCategory.category)
async def select_category(callback_query: types.CallbackQuery, state: FSMContext) -> None:

    message = callback_query.message

    await bot.delete_message(message.chat.id, message.message_id)

    category = callback_query.data
    await callback_query.answer(category)
    await state.update_data(category=category)

    prices = Prices(category).get_prices()

    keyboard = InlineKeyboardMarkup()
    buttons = [
        InlineKeyboardButton(f'12 –º–µ—Å. {prices.get(365)} —Ä', callback_data=f'12 –º–µ—Å. {prices.get(365)} —Ä'),
        InlineKeyboardButton(f'6 –º–µ—Å. {prices.get(180)} —Ä', callback_data=f'6 –º–µ—Å. {prices.get(180)} —Ä'),
        InlineKeyboardButton(f'3 –º–µ—Å. {prices.get(90)} —Ä', callback_data=f'3 –º–µ—Å. {prices.get(90)} —Ä'),
        InlineKeyboardButton(f'1 –º–µ—Å. {prices.get(30)} —Ä', callback_data=f'1 –º–µ—Å. {prices.get(30)} —Ä'),
        InlineKeyboardButton(f'1 –Ω–µ–¥–µ–ª—è {prices.get(7)} —Ä', callback_data=f'1 –Ω–µ–¥–µ–ª—è {prices.get(7)} —Ä'),
        InlineKeyboardButton(f'1 –¥–µ–Ω—å {prices.get(1)} —Ä', callback_data=f'1 –¥–µ–Ω—å {prices.get(1)} —Ä'),
        InlineKeyboardButton('–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Ç—Ä–∏ –¥–Ω—è', callback_data='–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Ç—Ä–∏ –¥–Ω—è'),
        InlineKeyboardButton('‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data='‚óÄÔ∏è–ù–∞–∑–∞–¥')
    ]

    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    for button in buttons:
        keyboard.add(button)

    await callback_query.message.answer('''–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω (–Ω–µ –†–§) –∏–ª–∏ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–∏—à–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @COJ_ZhIV\n–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –≥–æ–¥–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞ - –≤ –ø–æ–¥–∞—Ä–æ–∫.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:''', reply_markup=keyboard)
    await SelectCategory.next()

@dp.callback_query_handler(lambda callback_query: True, state=SelectCategory.traffic)
async def select_traffic(callback_query: types.CallbackQuery, state: FSMContext) -> None:

    traffic = callback_query.data
    message = callback_query.message

    await bot.delete_message(message.chat.id, message.message_id)

    if traffic == '‚óÄÔ∏è–ù–∞–∑–∞–¥':
        await state.finish()
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.')
        return


    await state.update_data(traffic=traffic)
    data = await state.get_data()

    category = data.get("category")

    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    # days = CONVERT_MONTH.get(int(traffic.split()[0]))

    if traffic != '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Ç—Ä–∏ –¥–Ω—è':

        date_type = ' '.join([traffic.split()[0], traffic.split()[1]]) # 1 –¥–µ–Ω—å, 1 –º–µ—Å.
        days = CONVERT_MONTH.get(date_type)
        price = PRICE.get(days)

        await state.update_data(days=days, price=price)

        url, payment_check = create_payment(price, f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {traffic.split()[0] + " " + traffic.split()[1]}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}')

        keyboard = InlineKeyboardMarkup(row_width=1)
        buttons = [
            InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url=url),
            InlineKeyboardButton('‚úÖ–û–ø–ª–∞—Ç–∏–ª‚úÖ', callback_data=payment_check),
            InlineKeyboardButton('‚óÄÔ∏è–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥')
        ]

        keyboard.add(*buttons)

        await callback_query.answer(traffic)

    if traffic == '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Ç—Ä–∏ –¥–Ω—è':
        '''–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞'''

        with open(f'{DB_LOC}/data.json', 'r', encoding='utf-8') as file:
            data_users = json.load(file)

        if not data_users[str(message.chat.id)]['free_sub']:
            await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥')
            data = await state.get_data()
            print(data)
            data['days'] = 3

            subs = Subscribe(data.get('traffic'), data.get('days'))

            data_users[str(message.chat.id)]['subscribes'][data.get('category')] = subs.get_info()
            data_users[str(message.chat.id)]['free_sub'] = True
            print(data.get('traffic'), subs.get_info())

            with open(f'{DB_LOC}/data.json', 'w', encoding='utf-8') as file:
                json.dump(data_users, file, indent=4, ensure_ascii=False)

            await state.finish()
        else:

            await message.answer('–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª!')
            await state.finish()
    else:
        ''' –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ '''
        await message.answer(f'''–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞ <b>{days}</b> –¥–Ω–µ–π (–∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category}</b>), —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{Prices(category).get_needprice(CONVERT_MONTH.get(date_type))}</b> —Ä—É–±.''', reply_markup=keyboard)
        await SelectCategory.next()

@dp.callback_query_handler(lambda callback_query: True, state=SelectCategory.paid)
async def buy_or_bought(callback_query: types.CallbackQuery, state: FSMContext) -> None:

    message = callback_query.message

    if callback_query.data == '–ù–∞–∑–∞–¥':
        await bot.delete_message(message.chat.id, message.message_id)
        await state.finish()
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞!')
        return

    if check_payment(callback_query.data):

        paid = callback_query.data

        data = await state.get_data()

        await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')

        with open(f'{DB_LOC}/data.json', 'r', encoding='utf-8') as file:
            data_users = json.load(file)

        subs = Subscribe(data.get('traffic'), data.get('days'))

        data_users[str(message.chat.id)]['subscribes'][data.get('category')] = subs.get_info()
        print(data.get('traffic'), subs.get_info())

        with open(f'{DB_LOC}/data.json', 'w', encoding='utf-8') as file:
            json.dump(data_users, file, indent=4, ensure_ascii=False)

        await state.finish()

        #TODO: –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∫—É–ø–∫–∏
    else:
        await message.answer('–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª')